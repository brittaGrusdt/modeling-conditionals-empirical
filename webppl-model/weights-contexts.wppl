var par_zoibs = data["likelihoods_zoib"]
var par_gaussian = data["likelihoods_gaussian"]

var zoib_likelihoods = build_Pt_given_context_and_r(par_zoibs, "zero-one-inflated-beta")
var gaussian_likelihoods = build_Pt_given_context_and_r(par_gaussian, "gaussian")
var contexts = _.uniq(_.map(par_zoibs, 'id')).concat(_.uniq(_.map(par_gaussian, 'id')))


var params = {
  alpha: data.alpha,
  gamma: data.gamma,
  theta: data.theta,
  // cost_literal: data.cost_literal,
  // cost_conjunction: data.cost_conjunction,
  // cost_might: data.cost_might,
  // cost_conditional: data.cost_conditional
  p_utts: data.p_utts
}
var PROLIFIC_IDS = _.uniq(_.map(OBSERVATIONS, 'prolific_id'))
var TRIALS = _.uniq(_.map(OBSERVATIONS, 'id'))

setParams(params)
// just for debugging
var invalid_utts_states = check_states_utts(
  ALL_BNS,
  _.map(globalStore.utterances, 'utt'),
  globalStore.thresholds,
  params,
  true
)

if(data["verbose"][0]) {
  display("free parameters:")
  display("alpha: " + globalStore.alpha)
  display("gamma: " + globalStore.gamma)
  display("theta: " + globalStore.thresholds.theta)
  display("theta_might: " + globalStore.thresholds.theta_might)
  // display('vs_utts' + globalStore.utterances)
  // display('ps_utts' + globalStore.ps_utts)
  display('informativeness utterance types:')
  display("# conjunctions: " + globalStore.states_conjunction.length)
  display("# literals: " + globalStore.states_literal.length)
  display("# conditionals: " + globalStore.states_conditional.length)
  display("# mights: " + globalStore.states_might.length)
}
// get Bayes nets used for predictions for each trial + participant
// we sample a certain number of Bayes nets per relation
// (depending on P(r|data), computed beforehand in R)
// // ONE DISTRIBUTION FOR EACH CN: PRIOR CONDITIONED ON CN
var priors_conditioned = map(function(r) {
  var prior_conditioned_r = Infer({model: function() {
      var s = sample(globalStore.state_prior)
      condition(s.r == r)
      return(s)
    }, method: 'enumerate'})
  return([r, prior_conditioned_r])
}, RELATIONS)
var prior_conditioned_r = Object.fromEntries(priors_conditioned)
//prior_conditioned_r

var posterior_states_contexts = get_posterior_given_context(
  prior_conditioned_r, zoib_likelihoods, gaussian_likelihoods, contexts
)
posterior_states_contexts
