// liklihoods Zero-one inflated Beta
var par_zoibs = data["likelihoods_zoib"]
var par_gaussian = data["likelihoods_gaussian"]

var zoib_likelihoods = build_Pt_given_context_and_r(par_zoibs, "zero-one-inflated-beta")
var gaussian_likelihoods = build_Pt_given_context_and_r(par_gaussian, "gaussian")
var contexts = _.uniq(_.map(par_zoibs, 'id')).concat(_.uniq(_.map(par_gaussian, 'id')))


var params = {
  alpha: data.alpha,
  gamma: data.gamma,
  theta: data.theta,
  // cost_literal: data.cost_literal,
  // cost_conjunction: data.cost_conjunction,
  // cost_might: data.cost_might,
  // cost_conditional: data.cost_conditional
  p_utts: data.p_utts
}
var PROLIFIC_IDS = _.uniq(_.map(OBSERVATIONS, 'prolific_id'))
var TRIALS = _.uniq(_.map(OBSERVATIONS, 'id'))

setParams(params)
// just for debugging
var invalid_utts_states = check_states_utts(
  ALL_BNS,
  _.map(globalStore.utterances, 'utt'),
  globalStore.thresholds,
  params,
  true
)

if(data["verbose"][0]) {
  display("free parameters:")
  display("alpha: " + globalStore.alpha)
  display("gamma: " + globalStore.gamma)
  display("theta: " + globalStore.thresholds.theta)
  display("theta_might: " + globalStore.thresholds.theta_might)
  // display('vs_utts' + globalStore.utterances)
  // display('ps_utts' + globalStore.ps_utts)
  display('informativeness utterance types:')
  display("# conjunctions: " + globalStore.states_conjunction.length)
  display("# literals: " + globalStore.states_literal.length)
  display("# conditionals: " + globalStore.states_conditional.length)
  display("# mights: " + globalStore.states_might.length)
}
// get Bayes nets used for predictions for each trial + participant
// we sample a certain number of Bayes nets per relation
// (depending on P(r|data), computed beforehand in R)
// // ONE DISTRIBUTION FOR EACH CN: PRIOR CONDITIONED ON CN
var priors_conditioned = map(function(r) {
  var prior_conditioned_r = Infer({model: function() {
      var s = sample(globalStore.state_prior)
      condition(s.r == r)
      return(s)
    }, method: 'enumerate'})
  return([r, prior_conditioned_r])
}, RELATIONS)
var PRIOR_CONDITIONED_R = Object.fromEntries(priors_conditioned)
//PRIOR_CONDITIONED_R

var posterior_states_context_list = map(function(c_i){
  var P_s_given_context = Infer({
    model:function(){
      var P_r_given_ci = get_P_r_given_context(c_i)
      var r = sample(P_r_given_ci)
      var s = sample(PRIOR_CONDITIONED_R[r])
      if(s.r == "A || C"){
        var p_blue_green = Math.exp(s.table.score("AC"))
        var p_blue = p_blue_green + Math.exp(s.table.score("A-C"))
        var p_green = p_blue_green + Math.exp(s.table.score("-AC"))
        var diff = p_blue_green - p_blue * p_green

        var cat_blue =  p_blue in [0, 1] ? "Bernoulli" : "Beta";
        var likelihood_fn_blue = zoib_likelihoods[c_i]["blue"][cat_blue]

        var cat_green = p_green in [0, 1] ? "Bernoulli" : "Beta";
        var likelihood_fn_green = zoib_likelihoods[c_i]["green"][cat_green]

        var ll = likelihood_fn_blue.score(p_blue) +
          likelihood_fn_green.score(p_green) +
          zoib_likelihoods[c_i]["blue"]["Categorical"].score(cat_blue) +
          zoib_likelihoods[c_i]["green"]["Categorical"].score(cat_green) +
          gaussian_likelihoods[c_i]["diff"].score(diff)

        factor(ll)

      } else { // dependent states

        var likelihood_fns = zoib_likelihoods[c_i]
        var log_likelihood = reduce(function(cell){
          var p_cell = Math.exp(s.table.score(cell))
          var cat = (p_cell == 0 || p_cell == 1) ? "Bernoulli" : "Beta";
          // for p- either bernoulli or beta distribution retrieved
          var likelihood_fn_p = likelihood_fns[cell][cat]
          // probabilitiy to get extreme values (category: Bernoulli) vs.
          // values within (0,1) (category: Beta)
          var likelihood_fn_cat = likelihood_fns[cell]["Categorical"]

          var ll = likelihood_fn_p.score(p_cell) + likelihood_fn_cat.score(cat)
          return(ll)
        }, 0, ["AC", "A-C", "-AC", "-A-C"])

        factor(log_likelihood)
      }
      return(s)
    }})
    return([c_i, P_s_given_context])

}, contexts)

var POSTERIOR_STATES_CONTEXTS = Object.fromEntries(posterior_states_context_list)
POSTERIOR_STATES_CONTEXTS

// var posterior_states_trial_subj_list = map(function(trial_id){
//   var observed_trial = OBSERVATIONS_BY_TRIAL_SUBJ[trial_id]
//   var subjects = Object.keys(observed_trial)
//   var observations = Object.values(observed_trial)
//   var p_s_given_dij = map(function(obs){
//     return(posterior_given_context(obs, PRIOR_CONDITIONED_R))
//   }, observations)
//
//   var obj = Object.fromEntries(zip(subjects, p_s_given_dij))
//   return([trial_id, obj])
// }, TRIAL_IDS)
// var POSTERIOR_STATES_TRIAL_SUBJ = Object.fromEntries(posterior_states_trial_subj_list)
// POSTERIOR_STATES_TRIAL_SUBJ
