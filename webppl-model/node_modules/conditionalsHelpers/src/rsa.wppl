/**
* RSA Literal Listener
* @param {string} utterance
* @return {Distribution}
*/
var literal_listener = cache(function(utterance, thresholds) {
  Infer({method:'enumerate',model: function(){
    var state = sample(globalStore.state_prior)
    // display(state.bn_id + ' utt: ' + utterance)
    condition(meaning(utterance, state["table"], thresholds))
    return state
  }})
}, 10000)

/**
* RSA Literal Listener marginalized to get distribution over tables only
* @param {string} utterance
* @return {Distribution}
*/
var marginal_LL = cache(function(utterance, thresholds, marginal_var){
  var ll = literal_listener(utterance, thresholds)
  var marginal = marginalize(ll, marginal_var)
  return(marginal)
}, 10000)


/**
* salience utterance prior  in terms of cost
* @return utterance <obj> e,g.: <utt: 'C and A', type: 'conjunction'>
**/
var utterance_prior_sample = function(){
  var uttProbs = map(function(u) {
    var cost = globalStore.utt_cost[u.utt]
    return Math.exp(-cost)
  }, globalStore.utterances)
  return categorical(uttProbs, globalStore.utterances);
}

/**
* RSA Speaker
* @param {object} state with fields 'table': mapping to Table distribution,
* 'r' mapping to causal relation and 'bn_id' which is a unique id for state
* @param {boolean} displayU for debugging, if true displays utilities of each
* sampled utterance
* @return {Distribution}
*/
var speaker = function(state, displayU){
  let distr = Infer({method:'enumerate', model: function(){
    //var utterance = uniformDraw(globalStore.utterances)
    var utterance = utterance_prior_sample() // in terms of uttrance cost
    var LL = marginal_LL(utterance.utt, globalStore.thresholds, 'table')
    var utility = LL.score(state.table)
    if(displayU && utility != -Infinity){
      display(utterance + ": " + utility)
    }
    factor(globalStore.alpha * utility)
    return(utterance)
    }
  });
 return(distr)
}

// literal speaker
var speaker_lit = function(state, displayU){
  let distr = Infer({method:'enumerate', model: function(){
    //var utterance = uniformDraw(globalStore.utterances)
    var utterance = utterance_prior_sample() // in terms of uttrance cost
    // all applicable utterances for 'state' are equally likely
    var utility = meaning(utterance.utt, state["table"], globalStore.thresholds) ? 0 : -Infinity
    if(displayU && utility != -Infinity) { display(utterance.utt + ": " + utility) }
    factor(globalStore.alpha * utility)
    return(utterance)
    }
  });
return(distr)
}

// random speaker
var speaker_rnd = function(state, displayU){
  let distr = Infer({method:'enumerate', model: function(){
    //var utterance = uniformDraw(globalStore.utterances)
    var utterance = utterance_prior_sample() // in terms of uttrance cost
    if(displayU && utility != -Infinity) { display(utterance + ": " + utility) }
    return(utterance)
    }
  });
return(distr)
}

/**
* RSA Pragmatic Listener
* @param {string} utterance
* @return {Distribution}
*/
var listener = function(utterance){
  return Infer({method:'enumerate', model:function(){
                  var state = sample(globalStore.state_prior)
                  var sp = speaker(state, false)
                  observe(sp, utterance)
                  return state
                }})
}
