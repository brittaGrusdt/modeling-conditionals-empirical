/**
* computes marginal probability for all input variables
* @param {Distribution} Table
* @param {Array.<string>} variables  e.g.["A", "-C"]
* @return {number} probability that 'variables' are true in 'Table'
*/
var marginal = cache(function(Table, variables){
  var tokens = Table.support()
  var all_x = map(function(v){
    v.indexOf("-") != -1 ? filter(function(k){k.indexOf(v) != -1}, tokens) :
                           filter(function(k){k.indexOf("-"+v) == -1}, tokens)
  }, variables)
  var xs = intersect_arrays(all_x)

  return reduce(function(x, acc){acc + Math.exp(Table.score(x))}, 0, xs)
}, 10000)

/**
* builds compound utterances
* @param {Array.<Array.<string>>} var_powerset
* @param {string} connective
* @return {Array.<Array.<string>>} all combinations of strings using
* 'connective' for each subset of strings in 'var_powerset'
*/
var connect_variables = function(var_powerset, connective){
  var connected_vars = mapIndexed(function(idx, first_set){
    var rest_sets = var_powerset.slice(idx+1)
    var sets_to_pair = filter(function(rest_i){
      all(function(x){
        rest_i.indexOf(x) == -1 && rest_i.indexOf(negate(x)) == -1
      }, first_set)
    }, rest_sets)
    var elems_to_pair = map(function(set_i){set_i.join(" and ")}, sets_to_pair)

    var antecedent = first_set.join(" and ")
    var ifs = reduce(function(key, acc){
      acc.concat([antecedent + connective + key, key + connective + antecedent])
    }, [], elems_to_pair)
    return ifs
  }, var_powerset)

  var filtered = filter(function(arr){arr.length >= 1}, connected_vars)
  var connected_vars = reduce(function(arr, acc){
    acc.concat(arr)
  }, [], filtered)

  return connected_vars
}

/**
* generates maximal set of utterances
* @param {Array.<string>} variables
* @param {boolean} include_null_utt
* @return {Array.<string>} conjunctions, literals, might + literal and
* conditionals built from 'variables'
*/
var make_utterances = function(variables, include_null_utt){
  var var_powerset = get_var_powerset(variables, false)

  var conj_literals = map(function(set_i){set_i.join(" and ")}, var_powerset)
  var literals = filter(function(utt){utt.indexOf(" and ") == -1}, conj_literals)
  display("literals: " + literals)
  var mights = map(function(lit){"might " + lit}, literals)
  display("mights: " + mights)

  var conditionals = connect_variables(var_powerset, " > ")
  display("conditionals: " + conditionals)

  var utterances = conj_literals.concat(mights.concat(conditionals))
  return include_null_utt ? [""].concat(utterances) : utterances;
}

/**
* computes probability corresponding to utterance
* @param {string} utterance
* @param {Distribution} Table
* @return {number} probability corresponding to 'utterance' (in state 'Table')
*/
var utterance_probs = cache(function(utterance, Table){
  if(utterance.indexOf(">") != -1){
    var components = utterance.split(" > ")
    var antecedent = components[0].split(" and ").join("")
    var consequent = components[1].split(" and ").join("")
    return marginal(Table, [antecedent, consequent]) /
           marginal(Table, [antecedent])
  }
  else if(utterance.includes("might")){
    var u = utterance.slice("might ".length)
    return marginal(Table, [u])
  } else if(utterance.includes("and")){
    var components = utterance.split(" and ")
    return marginal(Table, components)
  } else if(utterance.includes("or")) {
    var components = utterance.split(" or ")
    var p_marginals = marginal(Table, [components[0]]) +
      marginal(Table, [components[1]]);
    var p_joint = marginal(Table, components)
    return(p_marginals - p_joint)
  }
  else {
    return marginal(Table, [utterance])
  }
})

/**
* denotation function
* @param {string} utterance
* @param {Distribution} Table
* @return {boolean} true if 'utterance' is literally true in state 'Table'
*/
var meaning = cache(function(utterance, Table, thresholds){
 var p = utterance_probs(utterance, Table)
 var u_applicable =
  utterance == "" ? true :
  (utterance.includes('might') ? p > thresholds.theta_might :
  p >= thresholds.theta)
 // display(utterance + " " + p + " " + u_applicable)
 return u_applicable
}, 10000)

/**
* denotation function based on utterance types
* @param {string} utterance
* @param {Distribution} Table
* @return {boolean} true if 'utterance' is literally true in state 'Table'
*/
var meaning_by_utt_type = cache(function(utt_type, bn_id){
 // is any utterance of type 'utt_type' applicable to this Table?
 return(globalStore["states_" + utt_type].includes(bn_id))
}, 10000)


var cost = function(utterance) {
  utterance.includes("might") ? globalStore.cost.might :
  utterance.includes(">") ? globalStore.cost.conditional :
  utterance.includes(" and ") ? globalStore.cost.conjunction :
  globalStore.cost.literal;
}


var getUtteranceType = function(utt) {
  utt.includes("might") ? "might" :
  utt.includes(">") ? "conditional" :
  utt.includes("and") ? "conjunction" : "literal"
}

/**
* @arg all_utterances: <str>
**/
var check_states_utts = function(all_bns, all_utterances, thresholds, params, verbose){
  var states_to_remove = filter(function(bn){
    !any(function(u){
      meaning(u, bn["table"], thresholds)
    }, all_utterances)
  }, all_bns)
  if(verbose &&  states_to_remove.length > 0 ) {
    display("# states without applicable utterance " + states_to_remove.length)
    display(states_to_remove[0])
    display(params)
  }
  // are there utterances that are not applicable to any state?
  var utts_to_remove = filter(function(u){
    !any(function(s){meaning(u, s["table"], thresholds)}, all_bns)
  }, all_utterances)
  if(verbose && utts_to_remove.length > 0) {
    display("# utterances without state: " + utts_to_remove.length)
    display(utts_to_remove)
    display(params)
  }
  return({states: states_to_remove, utts: utts_to_remove})
}
