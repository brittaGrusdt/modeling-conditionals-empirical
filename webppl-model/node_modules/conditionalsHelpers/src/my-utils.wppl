/**
* negates a given variable using '-' as negation sign (e.g. -A -> A and A -> -A)
* @param {string} v
* @return {string}
*/
var negate = function(v){
  return v.startsWith("-") ? v.slice(1) : "-" + v
}

/**
* computes powerset of input strings
* @param {Array.<Array.<string>>} vars one array for each variable containing
* pos and possibly neg tokens, e.g. [["A", "-A"], ["C", "-C"]]
* @param {boolean} include_empty_set
* @return {Array.<Array.<string>>}
*/
var get_var_powerset = function(vars, include_empty_set){
  var powerset = Infer({model:function(){
                  var bools = repeat(vars.length, flip)
                  var tokens = mapIndexed(function(idx, b){
                    b ? uniformDraw(vars[idx]) : ""
                  }, bools)
                  return filter(function(t){t.length>0}, tokens)
                }}).support()
  include_empty_set ? powerset : filter(function(s){s.length > 0}, powerset)
}

/**
* computes elements that are in each of input arrays
* @param {Array.<Array>} arrays
* @return {Array} containig all shared elements
*/
var intersect_arrays = function(arrays){
  return filter(function(m){
          var m_in_all_lists = map(function(idx){arrays[idx].indexOf(m) != -1},
                                  _.range(1,arrays.length))
          return sum(m_in_all_lists)==m_in_all_lists.length
    }, arrays[0])
}


var truncated_normal = cache(function(mu, sigma){
  return(Infer({method: 'MCMC', samples:1000, model: function(){
    var x = gaussian({mu, sigma})
    condition(x>0 && x<1)
    return(x)
  }}))
}, 10000)


var lognormal = cache(function(mu, sigma){
  return(Infer({model: function(){
    var z = gaussian({mu: 0, sigma: 1});
    var x = Math.exp(mu + sigma * z)
    return(x)
  }, method:'rejection', samples: 1000}))
})
