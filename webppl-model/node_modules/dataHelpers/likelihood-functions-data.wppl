var EPSILON =  0.000001;

var exponentialKernel = function(prevVal) {
  var lambda = 1 / prevVal;
  return Exponential({a: lambda});
};

////////////////////// PRIORS  /////////////////////////////////////////////////

// Functions for zero-one inflated beta distribution //
var sample_zoib_prior = function(){
  var shape1 = sample(Exponential({a: 0.25}), {driftKernel: exponentialKernel})
  var shape2 = sample(Exponential({a: 0.25}), {driftKernel: exponentialKernel})
  var gamma = uniformDrift({a: 0, b:1, width: 0.1})
  var alpha = uniformDrift({a: 0, b:1, width: 0.1})
  return({alpha, gamma, shape1, shape2})
}

var sample_zoib = function(pars){
  var p = bernoulli({p: pars.alpha}) ? bernoulli({p: pars.gamma}) :
    beta({a: pars.shape1, b: pars.shape2});
  return(p)
}

var get_zoib_likelihood = function(p_obs, pars){
  var cat_obs = (p_obs == 0 || p_obs == 1) ? "01" : "Beta";
  var ll_cat = Categorical({vs: ["01", "Beta"],
                            ps: [pars.alpha, 1-pars.alpha]}).score(cat_obs)

  var ll_p_obs = cat_obs == "01" ?
    Bernoulli({p: pars.gamma}).score(p_obs == 1 ? true : false) :
    Beta({a: pars.shape1, b: pars.shape2}).score(p_obs);

  return(ll_cat + ll_p_obs)
}

// Other Functions //
var sample_prior_bg = function(){
  return({sd: uniform({a:0, b:0.5})})
}

var get_range_bg = function(p_blue, p_green){
  var min_ac = p_blue + p_green > 1 ? p_blue + p_green - 1 : 0;
  var max_ac = Math.min(p_blue, p_green)
  return({min: min_ac, max: max_ac})
}

// from beta(alpha, beta, a, c) distributed to beta(alpha, beta, 0, 1)
var transform_beta_ac_to_beta_01 = function(y, a, c){
  var x = (y - a) / (c - a)
  return(x)
}

var get_likelihood_bg = function(obs, pars_bg){
  var ll_bg = Gaussian({mu: 0, sigma: pars_bg.sd}).score(obs.diff)
  //display("obs: " + obs_ratio + " ll_bg: " + ll_bg)
  return(ll_bg)
}

var get_likelihood_dep_context = function(observed_ratings, pars) {
  //display(pars)
  var pars_if_bg = filter(function(obj){obj.p == "if_bg"}, pars)[0]
  var pars_if_nbg = filter(function(obj){obj.p == "if_nbg"}, pars)[0]
  var pars_blue = filter(function(obj){obj.p == "blue"}, pars)[0]

  var ll = reduce(function(obs, acc) {
    var ll_blue = get_zoib_likelihood(obs.blue, pars_blue)
    var ll_conditionals = obs.blue == 0 ?
      get_zoib_likelihood(obs.if_nbg, pars_if_nbg) : obs.blue == 1 ?
      get_zoib_likelihood(obs.if_bg, pars_if_bg) :
      (get_zoib_likelihood(obs.if_bg, pars_if_bg) +
        get_zoib_likelihood(obs.if_nbg, pars_if_nbg));

    var ll_x = ll_blue + ll_conditionals
    //display(ll_x)
    return(acc + ll_x)
  }, 0, observed_ratings)
  return(ll)
}

// ********* SAMPLING TABLES ******************* //

// generate new probability tables with given parameters //
var sample_independent_table = function(pars_blue, pars_green, pars_bg){
  var p_blue = sample_zoib(pars_blue)
  var p_green = sample_zoib(pars_green)
  // display("blue: " + p_blue + " green: " + p_green)

  var range_bg = get_range_bg(p_blue, p_green)
  var mu = p_blue * p_green
  var diff = gaussian({mu: 0, sigma: pars_bg.sd})
  var max_add = range_bg.max - mu
  var max_sub = mu - range_bg.min
  var delta = (diff > 0 && diff >= max_add) ? max_add :
    (diff > 0 ? diff :
      ((diff < 0 && diff <= -1 * max_sub) ? -1*max_sub : diff));
  var p_bg = mu + delta;

  // with P(b), P(g) and P(b,g), the probability table is fully defined
  var bng = p_blue - p_bg < 0 ? 0 : p_blue - p_bg; // avoid overflow
  var nbg = p_green - p_bg < 0 ? 0 : p_green - p_bg;
  var nbng = 1 - (p_bg + bng + nbg)

  // display("ac:" + p_bg + " anc: " + anc + " nac: " + nac + " nanc: " + nanc)
  // display("")

  // return(categorical({"vs": ["AC", "A-C", "-AC", "-A-C"],
  //                     "ps": [p_bg, anc, nac, nanc]}))
  return({"AC": p_bg, "A-C": bng, "-AC": nbg, "-A-C": nbng})
}


var sample_dependent_table = function(pars_if_bg, pars_if_nbg, pars_blue) {
  var p_blue = sample_zoib(pars_blue)
  var p_if_bg = sample_zoib(pars_if_bg)
  var p_if_nbg = sample_zoib(pars_if_nbg)
  return({"AC": p_if_bg * p_blue,
          "A-C": (1-p_if_bg) * p_blue,
          "-AC": p_if_nbg * (1-p_blue),
          "-A-C": (1-p_if_nbg) * (1-p_blue)})
}
